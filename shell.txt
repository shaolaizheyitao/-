shell
	1、使用变量  $(变量名)
	2、将变量变成只读形式	readonly 变量名
	3、删除变量		unset 变量名	unset不能够删除只读变量，变量被删除后不能再次使用
	
	
	4、shell字符串	
			shell字符串是shell编程中最常用最有用的数据类型，
			字符串可以用单引号、双引号，也可以不用引号
			
			
		单引号和双引号的限制和区别
		
		单引号：
			单引号里的任何字符都会原样输出，单引号字符串里面的变量是无效的
			单引号字符串中不能出现单独一个的单引号，但是可以成对出现（使用转义字符也不行）
			
		双引号：
			双引号：
				双引号可以有变量
				双引号里可以出现转义字符
		
		拼接字符串		
				
	5、获取字符串的长度   ${#变量名}

	6、截取子字符串       $(变量名:1:4)		相当于截取这个字符串的第2个到第四个
	
	7、shell数组的定义
			bash 支持以为数组（不支持多维数组），并且没有限制数组的大小
			类似于C语言，数组元素的下标由0开始编号
			获取数组中的元素要利用下标，可以是整数或算数表达式
			下标要大于0或者等于0
		定义数组：在shell中，用括号来表示数组，数组元素用“空格”来分割
	数组名(值1 值2 值3 ... 值n)
	
		还可以单独定义数组的各个分量
		数组名[下标]=变量值
		
		
		读取数组的元素一般是
			$(数组名[下标])
			
		获取数组的长度
			获取数组的长度方法和获取字符串是一样的
			${#数组名[@]}  或者  ${#数组名[*]}
			
			获取数组单个元素的长度
			${#数组名[下标]}
		
	8、shell的注释
		以#开头的行就是注释，会被解释器忽略
		通过每一行加一个#号设置多行注释
		
		如果在开发的过程中有大段的代码要注释，一行一行使用#太麻烦了
		所以可以把这一大段代码定义成一个函数，用{}括起来，然后前面再加  函数名()

		多行注释还可以使用
		:<<EOF
		注释内容...
		注释内容...
		注释内容...
		EOF
		
		EOF可以换成其他字符 比如  ! ' 
		
			
	9、shell传递参数
		$0为执行的文件名  $1为第一个参数  以此类推
		
		此外，还有几个特殊的字符用来处理参数
		
		$# 		表示传递到脚本的参数个数   ，不包含$0  这个执行的文件参数
			
	当要输出$时 需要加上 \   即  \$	
		
		在为shell脚本传递的参数中如果包含空格，应该使用单引号或者双引号将该参数括起来，
		以便于脚本将这个参数作为整体来接受
		在有参数的时候，可以使用对参数进行校验的方式减少错误的发生
		if [ -n "$1" ];then
			echo "包含第一个参数"
		else
			echo "没有包含第一个参数"
		fi
		注意 方括号【】 与 里面的代码要用空格  隔开
		
		
	10、shell中中括号的用法总结
		算数比较	对变量或值进行算术条件判断
		[ $var -eq 0 ]  	#当 $var 等于 0 时 ，返回真
		[ $var -ne 0 ]		#当 $var 不等于 0 时，返回真
		
		文件属性比较	
		[ -e $var ]			#文件是否存在
		[ -d $var ]			#是否是目录
		
		字符串比较	
		[[ $var1 = $var2 ]]
		
		其他操作符比较
		-gt     grater than     大于
		-lt		less than		小于
		-ge		大于等于
		-le		小于等于
		
		可以通过 -a(add)  或 -o(or) 结合多个条件进行测试
		
		[ $var1 -ne 0 -a $var2 -gt 2 ]
		[ $var1 -ne 0 -o $var2 -gt 2 ]
		
		
[ -f $file_var ]	变量 $file_var 是一个正常的文件路径或文件名 (file)，则返回真

[ -x $var ]	变量 $var 包含的文件可执行 (execute)，则返回真
[ -w $var ]	变量 $var 包含的文件可写(write)，则返回真
[ -r $var ]	变量 $var 包含的文件可读 (read)，则返回真

[ -L $var ]	变量 $var 包含是一个符号链接 (link)，则返回真
[ -d $var ]	变量 $var 包含的文件是目录 (directory)，则返回真
[ -e $var ]	变量 $var 包含的文件存在 (exist)，则返回真
[ -c $var ]	变量 $var 包含的文件是一个字符设备文件的路径 (character)，则返回真
[ -b $var ]	变量 $var 包含的文件是一个块设备文件的路径 (block)，则返回真	
		
		
	11、字符串比较
		在进行字符串比较时。最好使用双中括号[[]].因为单中括号可能会导致一些问题
		
		[[ $str1 = $str2 ]]  比较两个字符串是否相等
	
		[[ -z $str ]]		 如果str是空字符串  ，则返回真
		[[ -n $str ]]		 如果str是非空字符串，则返回真
	
		使用逻辑运算符 && 和 || 可以将多个条件组合起来，例如
		
		if [[ -n $str1 ]] && [[ -z $str2 ]];
		then
			echo " "
		fi
	
		
	test命令也可以用来执行条件检测，用test可避免使用过多【】方括号的问题
	【】中的测试条件同样可以通过test来完成
	
		if [[ $var -eq 0 ]];then echo "True";fi
		
		等价于
		
		if test $var -eq 0;then echo "true";fi
	
	
	
	
				
				