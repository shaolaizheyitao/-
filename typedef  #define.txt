typedef
	typedef仅限于为类型定义符号名称
	typedef是由编译器执行解释的






#define
	#define不仅可以为类型定义别名，也能为数值定义别名
	#define是由预编译器进行处理的







位域
	位域的声明
	在结构体中声明位域的形式如下
	struct
	{
		type  [member_name] :  width
	}
其中，type是类型，决定了如何解释位域的值，可以使整型、有符号无符号等等
      member_name   位域的名称（变量的名字）
      width   位域中位的数量，狂赌必须小于或等于指定类型的位宽度
	
	带有预定义宽度的变量被称为位域。位域可以存储多与1位的数
	例如从0 - 7的值，我们可以定义宽度为 3 的位域	
	如下
	struct
	{
		unsigned int age :3;
	}Age;
	此时我们的age变量只能使用3位bit来存储值，如果我们试图使用超过3位bit的空间，则无法完成



C预处理器  （C Preprocessor）CPP
	C预处理器不是编译器的组成部分，但是他是编译过程中的一个单独的步骤，
	说简单点，它只是一个文本替换工具
	它会指示编译器在实际编译之前完成所需要的预处理


errno
	在程序运行出错的时候，系统会同时设置一个错误代码errno
	这个错误代码是一个全局变量，表示在函数调用期间发生了错误

perror
	perror（）函数显示您传给他的字符串，后面会跟一个冒号、一个空格，和一个当前errno值的文本信息



strerror
	strerror（）函数，返回一个指针，指针指向当前errno的文本表示形式



#
	字符串常量化运算符
	在  ***宏定义中***    ，当需要将宏定义中的参数转化为字符串常量时
	则可以使用字符串常量化运算符 # 

## 
	标记粘贴运算符
	在  ***宏定义中***    ，当需要将宏定义中的参数合并在一起时
	则可以使用字符串常量化运算符 ##  
	它可以将两个 标记 合并形成一个 标记




























